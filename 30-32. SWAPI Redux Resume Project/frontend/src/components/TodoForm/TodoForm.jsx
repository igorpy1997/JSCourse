import React from 'react';
import { Formik, Form, Field } from 'formik';
import * as Yup from 'yup';
import {
    Box,
    TextField,
    Button,
    Typography,
    LinearProgress,
    Alert,
} from '@mui/material';
import { Add as AddIcon, Schedule as ScheduleIcon } from '@mui/icons-material';

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å Yup
const todoValidationSchema = Yup.object({
    todoText: Yup.string()
        .min(5, '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ - 5 —Å–∏–º–≤–æ–ª—ñ–≤')
        .max(500, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ - 500 —Å–∏–º–≤–æ–ª—ñ–≤')
        .required('–ü–æ–ª–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è')
        .trim()
});

const TodoForm = ({ onAddTodo, loading }) => {
    const handleSubmit = async (values, { resetForm, setSubmitting }) => {
        try {
            const success = await onAddTodo(values.todoText.trim());
            if (success) {
                resetForm();
            }
        } catch (error) {
            console.error('Error submitting todo:', error);
        } finally {
            setSubmitting(false);
        }
    };

    return (
        <Box sx={{ mb: 3 }}>
            <Formik
                initialValues={{ todoText: '' }}
                validationSchema={todoValidationSchema}
                onSubmit={handleSubmit}
            >
                {({ isSubmitting, errors, touched, values, handleChange, handleBlur }) => (
                    <Form>
                        <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>
                            <TextField
                                name="todoText"
                                label="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è"
                                placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è (–º—ñ–Ω. 5 —Å–∏–º–≤–æ–ª—ñ–≤)..."
                                value={values.todoText}
                                onChange={handleChange}
                                onBlur={handleBlur}
                                error={touched.todoText && Boolean(errors.todoText)}
                                helperText={touched.todoText && errors.todoText}
                                disabled={loading || isSubmitting}
                                fullWidth
                                multiline
                                maxRows={3}
                                variant="outlined"
                                sx={{
                                    '& .MuiOutlinedInput-root': {
                                        borderRadius: 2,
                                    }
                                }}
                            />

                            <Button
                                type="submit"
                                variant="contained"
                                disabled={loading || isSubmitting || !values.todoText.trim()}
                                startIcon={
                                    loading || isSubmitting ?
                                        <ScheduleIcon sx={{ animation: 'spin 1s linear infinite' }} /> :
                                        <AddIcon />
                                }
                                sx={{
                                    minWidth: 120,
                                    height: 56,
                                    borderRadius: 2,
                                    fontWeight: 'bold',
                                    textTransform: 'none',
                                }}
                            >
                                {loading || isSubmitting ? '–î–æ–¥–∞—î—Ç—å—Å—è...' : '–î–æ–¥–∞—Ç–∏'}
                            </Button>
                        </Box>

                        {/* –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ */}
                        <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Typography
                                variant="caption"
                                color={values.todoText.length < 5 && values.todoText.length > 0 ? 'warning.main' : 'text.secondary'}
                                sx={{ fontWeight: 500 }}
                            >
                                {values.todoText.length}/500 —Å–∏–º–≤–æ–ª—ñ–≤
                                {values.todoText.length < 5 && values.todoText.length > 0 &&
                                    ` (—â–µ ${5 - values.todoText.length})`
                                }
                            </Typography>

                            {values.todoText.length >= 450 && (
                                <Typography variant="caption" color="warning.main" sx={{ fontWeight: 500 }}>
                                    –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {500 - values.todoText.length} —Å–∏–º–≤–æ–ª—ñ–≤
                                </Typography>
                            )}
                        </Box>

                        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π */}
                        {(loading || isSubmitting) && (
                            <LinearProgress sx={{ mt: 2, borderRadius: 1 }} />
                        )}
                    </Form>
                )}
            </Formik>

            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            <Alert
                severity="info"
                sx={{ mt: 2, borderRadius: 2 }}
                icon={false}
            >
                <Typography variant="body2">
                    <strong>üí° –ü—ñ–¥–∫–∞–∑–∫–∞:</strong> –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter + Ctrl –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
                </Typography>
            </Alert>
        </Box>
    );
};

export default TodoForm;